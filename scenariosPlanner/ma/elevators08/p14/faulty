(:durative-action move-up-slow
	:id (1)
	:parameters (?lift - slow-elevator ?f1 - count ?f2 - count)
	:duration (= ?duration 40)
	:condition (and
		(at start (lift-at ?lift ?f1))
		(at start (above ?f1 ?f2))
		(at start (reachable-floor ?lift ?f2))
		(at start (xfreex ?lift))
	)
	:effect (and
		(at end (lift-at ?lift ?f2))
		(at start (not (lift-at ?lift ?f1)))
		(at end (increase ( total-cost ) ( travel-slow ?f1 ?f2 )))
		(at start (not (xfreex ?lift)))
		(at end (xfreex ?lift))
	)
)

(:durative-action move-down-fast
	:id (2)
	:parameters (?lift - fast-elevator ?f1 - count ?f2 - count)
	:duration (= ?duration 5)
	:condition (and
		(at start (lift-at ?lift ?f1))
		(at start (above ?f2 ?f1))
		(at start (reachable-floor ?lift ?f2))
		(at start (xfreex ?lift))
	)
	:effect (and
		(at end (not (lift-at ?lift ?f2)))
		(at start (lift-at ?lift ?f1))
		(at start (not (xfreex ?lift)))
		(at end (xfreex ?lift))
	)
)

(:durative-action board
	:id (3)
	:parameters (?lift - elevator ?p - passenger ?f - count ?n1 - count ?n2 - count)
	:duration (= ?duration 1)
	:condition (and
		(at start (lift-at ?lift ?f))
		(at start (passenger-at ?p ?f))
		(at start (passengers ?lift ?n1))
		(at start (next ?n1 ?n2))
		(at start (can-hold ?lift ?n2))
		(at start (xfreex ?lift))
	)
	:effect (and
		(at start (passenger-at ?p ?f))
		(at end (not (boarded ?p ?lift)))
		(at start (passengers ?lift ?n1))
		(at end (not (passengers ?lift ?n2)))
		(at start (not (xfreex ?lift)))
		(at end (xfreex ?lift))
	)
)


(:durative-action leave
	:id (4)
	:parameters (?lift - elevator ?p - passenger ?f - count ?n1 - count ?n2 - count)
	:duration (= ?duration 1)
	:condition (and
		(at start (lift-at ?lift ?f))
		(at start (boarded ?p ?lift))
		(at start (passengers ?lift ?n1))
		(at start (next ?n2 ?n1))
		(at start (xfreex ?lift))
	)
	:effect (and
		(at end (not (passenger-at ?p ?f)))
		(at start (boarded ?p ?lift))
		(at start (passengers ?lift ?n1))
		(at end (not (passengers ?lift ?n2)))
		(at start (not (xfreex ?lift)))
		(at end (xfreex ?lift))
	)
)
